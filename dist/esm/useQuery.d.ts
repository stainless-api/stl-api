import { z, type AnyEndpoint, type EndpointBodyInput, type EndpointQueryInput, type EndpointResponseOutput, EndpointHasRequiredQuery } from "stainless";
import { type UseQueryOptions as BaseUseQueryOptions, type UseQueryResult } from "@tanstack/react-query";
import { EndpointPathParam } from ".";
export type ClientUseQuery<E extends AnyEndpoint, TQueryFnData = EndpointResponseOutput<E>, TError = unknown, TData = TQueryFnData> = E["path"] extends z.ZodTypeAny ? E["body"] extends z.ZodTypeAny ? EndpointHasRequiredQuery<E> extends true ? (path: EndpointPathParam<E>, body: EndpointBodyInput<E>, options: UseQueryOptions<E, TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : (path: EndpointPathParam<E>, body: EndpointBodyInput<E>, options?: UseQueryOptions<E, TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : E["query"] extends z.ZodTypeAny ? EndpointHasRequiredQuery<E> extends true ? (path: EndpointPathParam<E>, query: EndpointQueryInput<E>, options?: BaseUseQueryOptions<TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : (path: EndpointPathParam<E>, query?: EndpointQueryInput<E>, options?: BaseUseQueryOptions<TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : (path: EndpointPathParam<E>, options?: UseQueryOptions<E, TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : E["body"] extends z.ZodTypeAny ? EndpointHasRequiredQuery<E> extends true ? (body: EndpointBodyInput<E>, options: UseQueryOptions<E, TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : (body: EndpointBodyInput<E>, options?: UseQueryOptions<E, TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : E["query"] extends z.ZodTypeAny ? EndpointHasRequiredQuery<E> extends true ? (query: EndpointQueryInput<E>, options?: BaseUseQueryOptions<TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : (query?: EndpointQueryInput<E>, options?: BaseUseQueryOptions<TQueryFnData, TError, TData>) => UseQueryResult<TData, TError> : (options?: UseQueryOptions<E, TQueryFnData, TError, TData>) => UseQueryResult<TData, TError>;
export type UseQueryOptions<E extends AnyEndpoint, TQueryFnData = EndpointResponseOutput<E>, TError = unknown, TData = TQueryFnData> = Omit<BaseUseQueryOptions<TQueryFnData, TError, TData, any>, "queryKey" | "queryFn"> & (E["query"] extends z.ZodTypeAny ? EndpointHasRequiredQuery<E> extends true ? {
    query: EndpointQueryInput<E>;
} : {
    query?: EndpointQueryInput<E>;
} : {});
export type KeysEnum<T> = {
    [P in keyof Required<T>]: true;
};
export declare const isUseQueryOptions: (obj: unknown) => obj is BaseUseQueryOptions<unknown, unknown, unknown, import("@tanstack/react-query").QueryKey>;
//# sourceMappingURL=useQuery.d.ts.map